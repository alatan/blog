<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 追求卓越，幸福就会不期而遇</title>
    <link>https://moge.fun/post/</link>
    <description>Recent content in Posts on 追求卓越，幸福就会不期而遇</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 15 Mar 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://moge.fun/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>微服务方案SpringCloudAlibaba</title>
      <link>https://moge.fun/post/SpringCloudAlibaba/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://moge.fun/post/SpringCloudAlibaba/</guid>
      <description>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案 组件 Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。 Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。 Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布</description>
    </item>
    
    <item>
      <title>分布式介绍</title>
      <link>https://moge.fun/post/distributed/</link>
      <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://moge.fun/post/distributed/</guid>
      <description>分布式理论基础 CAP 理论是分布式中基础理论，有三个重要指标：一致性、可用性、分区容错性。 一致性（Consistency） 可用性（Availability） 分区容错性（Partition Tolerance）</description>
    </item>
    
    <item>
      <title>Java架构演变历史</title>
      <link>https://moge.fun/post/JavaArchHistory/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://moge.fun/post/JavaArchHistory/</guid>
      <description>Java网站架构演变过程，大致分为5个阶段，分别为单体架构、集群架构、分布式架构、SOA架构和微服务架构。 单体架构 应用、数据库、文件都部署在一台机器上。简单来讲其实就是我们熟知的SSM架构(Spring+SpringMVC+MyBatis)，把所有的业务模块都放在一个应用中开发，</description>
    </item>
    
    <item>
      <title>Java特性-泛型</title>
      <link>https://moge.fun/post/generic/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://moge.fun/post/generic/</guid>
      <description>泛型，即参数化类型。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。 那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（类型形参），然后在使用/调用时传入具体的类型（类型实参）。 Java 语言中引入</description>
    </item>
    
    <item>
      <title>Java世界的入场券-面向对象</title>
      <link>https://moge.fun/post/Object-oriented/</link>
      <pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://moge.fun/post/Object-oriented/</guid>
      <description>面向对象程序设计（英语：Object-oriented programming，缩写：OOP）是种具有对象概念的编程典范，同时也是一种程序开发的抽象方针。它可能包含数据、特性、代码与方法。对象则指的是类（class）的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软</description>
    </item>
    
    <item>
      <title>学与思</title>
      <link>https://moge.fun/post/studyAndThink/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://moge.fun/post/studyAndThink/</guid>
      <description>学而不思则罔，思而不学则殆 一味学习而不思考，就会因为不能深刻理解而不能合理有效利用学习的知识，甚至会陷入迷茫。 一味空想而不去进行实实在在地学习和钻研，则终究是沙上建塔，一无所得。 因此我们只有把学习和思考结合起来，才能学到切实有用的知识，否则就会收效甚微。</description>
    </item>
    
    <item>
      <title>Markdown语法</title>
      <link>https://moge.fun/post/mdGrammar/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://moge.fun/post/mdGrammar/</guid>
      <description>标题 #### 这是 H5 #### 这是 H5 段落 这是一个段落。 这是另一个段落。 这是一个段落。 这是另一个段落。 斜体 *这是斜体* 这是斜体 粗体 **这是粗体** 这是粗体 粗体+斜体 ***这是粗体+斜体*** 这是粗体+斜体 删除线 ~~没有价值就会被抛弃~~ 没有价值就会被抛弃 引用 &amp;gt; Markdown是一种可以使用普通文本</description>
    </item>
    
  </channel>
</rss>