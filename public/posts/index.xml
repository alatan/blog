<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 软件开发学习记录</title><link>https://moge.fun/posts/</link><description>所有文章 | 软件开发学习记录</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 01 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://moge.fun/posts/" rel="self" type="application/rss+xml"/><item><title>AI 应用总结</title><link>https://moge.fun/ai/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><author>默哥</author><guid>https://moge.fun/ai/</guid><description>行业 外贸 外贸商品的各场景图片生成 比如一个U盘在各种电脑上面的图片
服装行业 电商服装行业画重点：打板、爆品复刻、反推拆解图 他说的是把图案直接生成衣服样子的图 裁剪图，单块的，把每一块拼起来就是衣服 打板行业痛点，时间长，成本高，有个衣服设计想法出来单个需要 5 千的成本 假模特也可以变真人模特，前视图，左，右，后试图，pose，CNet，lora，线稿
可落地尝试 创意服装二维码 照相馆 摄影 手绘效果 模特换脸 餐饮品牌营销公司 生成菜品的宣传图 菜品模型没有标品，肯定是要调教的
室内设计 毛胚房变装修效果图，室内设计应用场景
视频宣传片 安全教育宣传片（文案，卡通人物，生成视频） 实现 工具 AI绘画 https://www.openflowai.net/ Stable Diffusion(SD) Mid Journey（MJ） controlnet 线稿 AI视频 runway pika 生成视频(chatgpt做脚本) sd出图 需要选checkpoint lora embedding 然后结合 controlnet 可以快速出替换 gpts的应用市场里，有直接文本生提示词的，还是分好镜的 你去找“小说文本提示词大师”这类的应用就好 gpts有hunt可以搜搜 方式论 关键词生产 可以找一些参考对象 生成后 ps 再优化下</description></item><item><title>性能测试</title><link>https://moge.fun/pts/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><author>默哥</author><guid>https://moge.fun/pts/</guid><description>˚ 问题排查 测试指标 业务指标：如并发用户数、TPS（系统每秒处理事务数）、成功率、响应时间。 资源指标：如CPU资源利用率、内存利用率、I/O、内核参数（信号量、打开文件数）等。 应用指标：如空闲线程数、数据库连接数、GC/FULL GC次数、函数耗时等。 前端指标：如页面加载时间、网络时间（DNS、连接时间、传输时间等）。 工具 APM工具（如ARMS）进行中间件、数据库、应用层面的问题定位。</description></item><item><title>秒杀(限时抢购)系统设计</title><link>https://moge.fun/flashsale/</link><pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate><author>默哥</author><guid>https://moge.fun/flashsale/</guid><description>参考文章 高性能秒杀系统设计 秒杀架构实践 百万级用户的抽奖系统</description></item><item><title>单点登录</title><link>https://moge.fun/sso/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><author>默哥</author><guid>https://moge.fun/sso/</guid><description> 单点登录（Single Sign On），简称为 SSO，是比较流行的企业业务整合的解决方案之一。SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。
参考文章 单点登录 单点登录总结</description></item><item><title>Nacos解析</title><link>https://moge.fun/nacos/</link><pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate><author>默哥</author><guid>https://moge.fun/nacos/</guid><description>临时实例和持久化实例。 在定义上区分临时实例和持久化实例的关键是健康检查的方式。 临时实例使用客户端上报模式，而持久化实例使用服务端反向探测模式。 临时实例需要能够自动摘除不健康实例，而且无需持久化存储实例，那么这种实例就适用于类 Gossip 的协议。 右边的持久化实例使用服务端探测的健康检查方式，因为客户端不会上报心跳，那么自然就不能去自动摘除下线的实例。 实现对比 Zookeeper：保证CP，放弃可用性；一旦zookeeper集群中master节点宕了，则会重新选举leader，这个过程可能非常漫长，在这过程中服务不可用。 Eureka：保证AP，放弃一致性；Eureka集群中的各个节点都是平等的，一旦某个节点宕了，其他节点正常服务（一旦客户端发现注册失败，则将会连接集群中其他节点），虽然保证了可用性，但是每个节点的数据可能不是最新的。 Nacos：同时支持CP和AP，默认是AP，可以切换；AP模式下以临时实例注册，CP模式下服务永久实例注册。 健康检查 客户端健康检查 客户端健康检查主要关注客户端上报心跳的方式、服务端摘除不健康客户端的机制。
服务端健康检查 而服务端健康检查，则关注探测客户端的方式、灵敏度及设置客户端健康状态的机制。
从实现复杂性来说，服务端探测肯定是要更加复杂的，因为需要服务端根据注册服务配置的健康检查方式，去执行相应的接口，判断相应的返回结果，并做好重试机制和线程池的管理。
这与客户端探测，只需要等待心跳，然后刷新 TTL 是不一样的。同时服务端健康检查无法摘除不健康实例，这意味着只要注册过的服务实例，如果不调用接口主动注销，这些服务实例都需要去维持健康检查的探测任务，而客户端则可以随时摘除不健康实例，减轻服务端的压力。
Nacos实现配置管理和动态配置 添加对应spring-cloud-starter-alibaba-nacos-config依赖 使用原生注解@Value()导入配置 使用原生注解@RefreshScope刷新配置 根据自己业务场景做好多环境配置隔离(Namespace)、不同业务配置隔离(Group) 切记：命名空间和分组的配置一定要放在bootstrap.yml或者bootstrap.properties配置文件中 参考文章 Nacos 注册中心的设计原理详解 Nacos 实现原理详解 Nacos 使用</description></item><item><title>Spring Cloud Alibaba</title><link>https://moge.fun/springcloudalibaba/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><author>默哥</author><guid>https://moge.fun/springcloudalibaba/</guid><description>Spring Cloud Alibaba 组件 Spring Cloud - Gateway 网关 Spring Cloud - Ribbon 实现负载均衡 Spring Cloud - Feign 实现远程调用 Spring Cloud - Sleuth 实现调用链监控 Spring Cloud Alibaba - Nacos 实现注册中心/配置中心 Spring Cloud Alibaba - Sentinel 实现服务容错(限流，降级) Spring Cloud Alibaba - Seata 实现分布式事务 Spring Cloud Alibaba 组件 Nacos Nacos 是一个 Alibaba 开源的、易于构建云原生应用的动态服务发现、配置管理和服务管理平台。
Nacos 这个名字怎么读呢？它的音标为 /nɑ:kəʊs/。这个名字不是一个标准的单词，而是以下单词的首字母缩写：Name and Config Service。
Nacos Discovery 使用 Spring Cloud Alibaba Nacos Discovery，可基于 Spring Cloud 的编程模型快速接入 Nacos 服务注册功能。</description></item><item><title>Spring Cloud Hystrix 解析</title><link>https://moge.fun/springcloud-hystrix/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><author>默哥</author><guid>https://moge.fun/springcloud-hystrix/</guid><description>参考文章 Hystrix原理与实战 Hystrix原理与实战 Hystrix 源码分析及实践</description></item><item><title>Spring Cloud Eureka 解析</title><link>https://moge.fun/springcloud-eureka/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><author>默哥</author><guid>https://moge.fun/springcloud-eureka/</guid><description>先来一波问题，然后看看Enueka是通过什么方式处理的。
Eureka注册中心使用什么样的方式来储存各个服务注册时发送过来的机器地址和端口号？ 各个服务找Eureka Server拉取注册表的时候，是什么样的频率？ 各个服务是如何拉取注册表的？ 对于一个有几百个服务，部署上千台机器的大型分布式系统来说，这套系统会对Eureka Server造成多大的访问压力？ Eureka Server从技术层面是如何抗住日千万级访问量的？ 基本知识点，各个服务内的Eureka Client组件，默认情况下，每隔30秒会发送一个请求到Eureka Server，来拉取最近有变化的服务信息
Eureka Server设计精妙的注册表存储结构 维护注册表、拉取注册表、更新心跳时间，全部发生在内存里！这是Eureka Server非常核心的一个点。 Eureka Server端优秀的多级缓存机制 尽可能保证了内存注册表数据不会出现频繁的读写冲突问题。 并且进一步保证对Eureka Server的大量请求，都是快速从纯内存走，性能极高。 总结 通过上面的分析可以看到，Eureka通过设置适当的请求频率拉取注册表30秒间隔，发送心跳30秒间隔），可以保证一个大规模的系统每秒请求Eureka Server的次数在几百次。 同时通过纯内存的注册表，保证了所有的请求都可以在内存处理，确保了极高的性能 另外,多级缓存机制，确保了不会针对内存数据结构发生频繁的读写并发冲突操作，进一步提升性能。 参考文章 Eureka 原理 Eureka 原理解析 深入学习 Eureka 原理 微服务注册中心如何承载大型系统的千万级访问</description></item><item><title>Spring Cloud</title><link>https://moge.fun/springcloud/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><author>默哥</author><guid>https://moge.fun/springcloud/</guid><description>Spring 以 Bean（对象） 为中心，提供 IOC、AOP 等功能。 Spring Boot 以 Application（应用） 为中心，提供自动配置、监控等功能，专注于快速方便的开发单个微服务。 Spring Cloud 以 Service（服务） 为中心，关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务SpringBoot可以离开SpringCloud独立使用开发项目， 但是SpringCloud离不开SpringBoot ，属于依赖的关系。 Spring Cloud是目前最常用的微服务开发框架，Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、熔断保护、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。
版本对应 Spring Cloud Version Spring Boot Version Spring Cloud Alibaba Version Spring Cloud 2020.0.1 2.4.x 2021.1 Spring Cloud Hoxton 2.2.x, 2.3.x 2.2.x Spring Cloud Greenwich 2.1.x 2.1.x Spring Cloud Finchley 2.0.x 2.0.x(停止维护，建议升级) Spring Cloud Edgware 1.5.x 1.5.x(停止维护，建议升级) Spring Cloud Dalston 1.5.x 1.5.x(停止维护，建议升级) SpringCloud的基础功能 服务治理： Spring Cloud Eureka 服务容错保护： Spring Cloud Hystrix 客户端负载均衡： Spring Cloud Ribbon 基于Ribbon和Hystrix的声明式服务调用组件： Spring Cloud OpenFeign 整合了ribbon，具有负载均衡的能力。 整合了Hystrix，具有熔断的能力。 API网关服务：Spring Cloud Zuul 分布式配置中心： Spring Cloud Config Spring Cloud 服务治理-Eureka 为了解决微服务架构中的服务实例维护问题(ip地址)， 产生了大量的服务治理框架和产品。 这些框架和产品的实现都围绕着服务注册与服务发现机制来完成对微服务应用实例的自动化管理。</description></item><item><title>Dubbo总结</title><link>https://moge.fun/dubbo/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><author>默哥</author><guid>https://moge.fun/dubbo/</guid><description>Apache Dubbo 是一款微服务开发框架，它提供了 RPC通信 与 微服务治理 两大关键能力。这意味着，使用 Dubbo 开发的微服务，将具备相互之间的远程发现与通信能力， 同时利用 Dubbo 提供的丰富服务治理能力，可以实现诸如服务发现、负载均衡、流量调度等服务治理诉求。同时 Dubbo 是高度可扩展的，用户几乎可以在任意功能点去定制自己的实现，以改变框架的默认行为来满足自己的业务需求。
服务是 Dubbo 中的核心概念，一个服务代表一组 RPC 方法的集合，服务是面向用户编程、服务发现机制等的基本单位。
Dubbo 开发的基本流程是：用户定义 RPC 服务，通过约定的配置 方式将 RPC 声明为 Dubbo 服务，然后就可以基于服务 API 进行编程了。对服务提供者来说是提供 RPC 服务的具体实现，而对服务消费者来说则是使用特定数据发起服务调用。
服务发现 服务发现，即消费端自动发现服务地址列表的能力，是微服务框架需要具备的关键能力，借助于自动化的服务发现，微服务之间可以在无需感知对端部署位置与 IP 地址的情况下实现通信。
实现服务发现的方式有很多种，Dubbo 提供的是一种 Client-Based 的服务发现机制，通常还需要部署额外的第三方注册中心组件来协调服务发现过程，如常用的 Nacos、Consul、Zookeeper 等，Dubbo 自身也提供了对多种注册中心组件的对接，用户可以灵活选择。
服务发现 服务发现的一个核心组件是注册中心，Provider 注册地址到注册中心，Consumer 从注册中心读取和订阅 Provider 地址列表。 因此，要启用服务发现，需要为 Dubbo 增加注册中心配置：
以 dubbo-spring-boot-starter 使用方式为例，增加 registry 配置
1 2 3 4 # application.properties dubbo registry address: zookeeper://127.0.0.1:2181 服务流量管理 流量管理的本质是将请求根据制定好的路由规则分发到应用服务上，如下图所示： 流量管理 Dubbo提供了支持mesh方式的流量管理策略，可以很容易实现 A/B测试、金丝雀发布、蓝绿发布等能力。</description></item></channel></rss>